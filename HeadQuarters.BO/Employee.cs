//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using HeadQuarters.DL;

public class Employee
{
    private int empID;
    private string firstName;
    private string nicNo;
    private string lastName;
    private DateTime dateOfBirth;
    private string conNum;
    private int branchID;
    private string user;
    private string pass;
    private int jobID;
    private string jobTitle;

	public virtual int employee_id
	{
        get { return empID; }
        set { empID = value; }
	}

	public virtual string first_name
	{
        get { return firstName; }
        set { firstName = value; }
	}

	public virtual string nic
	{
        get { return nicNo; }
        set { nicNo = value; }
	}

	public virtual string last_name
	{
        get { return lastName; }
        set { lastName = value; }
	}

	public virtual DateTime date_of_birth
	{
        get { return dateOfBirth; }
        set { dateOfBirth = value; }
	}

	public virtual string contact_number
	{
        get { return conNum; }
        set { conNum = value; }
	}
	
	public virtual int branch_id
	{
        get { return branchID; }
        set { branchID = value; }
	}

	public virtual string username
	{
        get { return user; }
        set { user = value; }
	}

	public virtual string password
	{
        get { return pass; }
        set { pass = value; }
	}

	public virtual int job_id
	{
        get { return jobID; }
        set { jobID = value; }
	}

    public virtual string job_title
    {
        get { return jobTitle; }
        set { jobTitle = value; }
    }

	public virtual Branch Branch
	{
		get;
		set;
	}


    public Employee(string firstName, string lastName, string Nic, DateTime dateOfBirth, string contactNumber, int branchId,int jobID,string jobTitle)
    {
        first_name = firstName;
        last_name = lastName;
        nic = Nic;
        date_of_birth = dateOfBirth;
        contact_number = contactNumber;
        branch_id = branchId;
        job_id = jobID;
        job_title = jobTitle;        
        
        //Generate password and username randomly and assign. 
        username = createUsername(nic, job_title);
        password = createPassword();
        
    }

    public Employee(int employeeId,string firstName, string lastName, string Nic, DateTime dateOfBirth, string contactNumber, int branchId, int jobID)
    {        
        employee_id = employeeId;
        first_name = firstName;
        last_name = lastName;
        nic = Nic;
        date_of_birth = dateOfBirth;
        contact_number = contactNumber;
        job_id=jobID;
        branch_id = branchId;
    }

    public Employee()
    {

    }

    public string createUsername(string _nic, string _pos)
    {
        string res = "";
        char pos = _pos[0];
        Char.ToLower(pos);
        if (pos == 'd'||pos=='D')
        {
            res = "driver@" + _nic;
        }
        else if (pos == 'a'||pos=='A')
        {
            res = "admin@" + _nic;
        }
        else if (pos == 's'||pos=='S')
        {
            res = "staff@" + _nic;
        }

        return res;
    }

    public string createPassword()
    {
        string pass = Guid.NewGuid().ToString();
        return pass;
    }

	public virtual void ChangeStatus()
	{
		throw new System.NotImplementedException();
	}

	public bool AddEmployee(string connString)
	{
        try
        {
            //no need of insert employee id->becuase it is auto incremented

            string query = "INSERT INTO Employee(first_name,last_name,nic,date_of_birth,contact_number,username,password,job_id,branch_id)"+
                "VALUES(@first_name,@last_name,@nic,@date_of_birth,@contact_number,@username,@password,@job_id,@branch_id)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[9];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@first_name", DbType.String,first_name);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@last_name", DbType.String,last_name);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@nic", DbType.String,nic);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@date_of_birth", DbType.DateTime,date_of_birth);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@contact_number", DbType.String,contact_number);
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@username", DbType.String,username);
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@password", DbType.String,password);
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@job_id", DbType.Int32,job_id);
            paraArray[8] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32,branch_id);
           
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}


    public bool UpdateEmployee(string connString)
    {
        try
        {
            string query = "Update Employee set first_name=@first_name,last_name=@last_name,nic=@nic,date_of_birth=@date_of_birth,contact_number=@contact_number,job_id=@job_id,branch_id=@branch_id where employee_id=@employee_id ";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[8];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@first_name", DbType.String, first_name);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@last_name", DbType.String, last_name);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@nic", DbType.String, nic);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@date_of_birth", DbType.DateTime, date_of_birth);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@contact_number", DbType.String, contact_number);            
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@job_id", DbType.Int32, job_id);
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32, branch_id);
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32, employee_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

	public bool RemoveEmployee(string connString)
	{
        try
        {
            string query = "Delete from Employee where employee_id=@employee_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[1];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32,employee_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public List<Employee> GetEmployeeInfo(string connString)
	{
        try
        {
            List<Employee> employeeList = new List<Employee>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select employee_id,first_name,last_name,nic,date_of_birth,contact_number,username,password,job_id,branch_id from Employee";
            if (employee_id !=0)
            {
                query += " where employee_id=@employee_id";
                DbParameter[] paraArray = new DbParameter[1];
                paraArray[0] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32, employee_id);

                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, paraArray);
            }
            else
            {
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);

            }
            while (reader.Read())
            {
                Employee e = new Employee();
                e.employee_id = Convert.ToInt32(reader[0].ToString());
                e.first_name = reader[1].ToString();
                e.last_name = reader[2].ToString();
                e.nic = reader[3].ToString();
                e.date_of_birth = Convert.ToDateTime(reader[4].ToString());
                e.contact_number = reader[5].ToString();
                e.username = reader[6].ToString();
                e.password = reader[7].ToString();
                e.job_id = Convert.ToInt32(reader[8].ToString());
                e.branch_id = Convert.ToInt32(reader[9].ToString());

                employeeList.Add(e);
            }
            reader.Close();
            conn.Close();
            return employeeList;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}


    
}

