//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using HeadQuarters.DL;

//In here Settings class means Type
public class Settings
{
    private string typ;
    private int typID;
    private Decimal kmRate;
    private Decimal hrRate;

	public virtual string type
	{
        get { return typ; }
        set { typ = value; }
	}

    public virtual int type_id
    {
        get { return typID; }
        set { typID = value; }
    }
    /*float 7 digits of precision
      double has about 15 digits of precision
      decimal has about 28 digits of precision
    */
    public virtual Decimal km_rate{
        get { return kmRate; }
        set { kmRate = value; }
    }

    public virtual Decimal hourly_rate{
        get { return hrRate; }
        set { hrRate = value; }
    }

    public Settings(string typ,Decimal km,Decimal hr) {
        type = typ;
        km_rate = km;
        hourly_rate = hr;
    }

    public Settings() { }

	public bool AddType(string connString)
	{
        try
        {    
            //type_id is auto incremented
            string query = "INSERT INTO Type(type,km_rate,hourly_rate)VALUES(@type,@km_rate,@hourly_rate)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[3];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type", DbType.String, type); 
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@km_rate", DbType.Decimal,km_rate); 
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@hourly_rate", DbType.Decimal,hourly_rate); 
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public bool RemoveType(string connString)
	{
        try
        {
            string query = "Delete from Type where type_id=@type_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[1];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type_id", DbType.Int32,type_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public bool UpdateType(string connString,int typeID)
	{
        try
        {
            string query = "Update Type set type=@type,km_rate=@km_rate,hourly_rate=@hourly_rate where type_id='"+typeID+"'";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[3];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type", DbType.String, type);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@km_rate", DbType.Decimal,km_rate);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@hourly_rate", DbType.Decimal,hourly_rate);
            
            
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public List<Settings> GetTypeInfo(String connString)
	{
		 try
            {
                List<Settings> typeList = new List<Settings>();
                DbDataReader reader = null;
                DbHelper.ConnectionString = connString;
                DbConnection conn = DbHelper.GetConnection();
                conn.Open();

                string query = "select type_id,type,km_rate,hourly_rate from Type";
                if (type_id !=0)
                {
                    query += " where type_id=@type_id";
                    DbParameter[] paraArray = new DbParameter[1];
                    paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type_id", DbType.Int32,type_id);

                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, paraArray);
                }
                else
                {
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);
 
                }
                while (reader.Read())
                {
                    Settings s = new Settings();
                    s.type_id= Convert.ToInt32(reader[0].ToString());
                    s.type=reader[1].ToString();
                    s.km_rate=Convert.ToDecimal(reader[2].ToString());
                    s.hourly_rate=Convert.ToDecimal(reader[3].ToString());
                    
                    typeList.Add(s);
                }
                reader.Close();
                conn.Close();
                return typeList;
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

    //get type_id accorting to type from the database

    public int GetTypeID(string connString, string type_name)
    {
        try
        {
            int type_id = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select type_id from Type where type='" + type_name + "'";


            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {
                type_id = Convert.ToInt32(reader[0].ToString());

            }
            reader.Close();
            conn.Close();
            return type_id;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get type according to type id 

    public string GetTypeAccordingToTypeId(string connString, int typeId)
    {
        try
        {
            string type = "";
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select type from Type where type_id='" + typeId + "'";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {

                type = reader[0].ToString();


            }
            reader.Close();
            conn.Close();
            return type;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get all the job titles
    public List<string> GetAllJobTitles(string connString)
    {
        try
        {
            List<string> jobTitlteList = new List<string>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select job_title from Job";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);

            while (reader.Read())
            {
                string branch = reader[0].ToString();
                jobTitlteList.Add(branch);
            }
            reader.Close();
            conn.Close();
            return jobTitlteList;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //get job_id according to job title
    public int GetJobIdAccordingToJobTitle(string connString,string jobTitle)
    {
        try
        {
            int jobID = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select job_id from Job where job_title='" + jobTitle + "'";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {

                jobID = Convert.ToInt32(reader[0].ToString());


            }
            reader.Close();
            conn.Close();
            return jobID;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }


    //get job_id according to job title
    public string GetJobTitleAccordingToJobId(string connString, int jobID)
    {
        try
        {
            string jobTitle = "";
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select job_title from Job where job_id='" + jobID + "'";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {

                jobTitle = reader[0].ToString();


            }
            reader.Close();
            conn.Close();
            return jobTitle;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get km rate and hourly rate according to id
    public Settings GetRatesAccordingToTypeId(string connString, int typeId)
    {
        try
        {
            Settings s = new Settings();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select km_rate,hourly_rate from Type where type_id='" + typeId + "'";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {
                s.km_rate = Convert.ToDecimal(reader[0].ToString());
                s.hourly_rate = Convert.ToDecimal(reader[1].ToString());
            }
            reader.Close();
            conn.Close();
            return s;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //get km_rate according to reserved cab

    public Decimal GetKmRateAccordingToReservationID(string connString, int reservID)
    {
        try
        {
            Decimal kmRate = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select km_rate from Type where type_id=(select type_id from Cab where cab_id=(select cab_id from Reservation where reservation_id='"+reservID+"'))";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {
                kmRate = Convert.ToDecimal(reader[0].ToString());               
            }
            reader.Close();
            conn.Close();
            return kmRate;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //get hourly_rate according to reserved cab

    public Decimal GetHrRateAccordingToReservationID(string connString, int reservID)
    {
        try
        {
            Decimal hrRate = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select hourly_rate from Type where type_id=(select type_id from Cab where cab_id=(select cab_id from Reservation where reservation_id='" + reservID + "'))";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {
                hrRate = Convert.ToDecimal(reader[0].ToString());
            }
            reader.Close();
            conn.Close();
            return hrRate;
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
	}

    



