//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using HeadQuarters.DL;
using System.Collections;



public class Reservation
{
    private string feed;
    private int reservID;
    private string pickAdd;
    private string dest;
    private DateTime pickDateTime;
    private DateTime dropDateTime;
    private Decimal addDistance;
    private Decimal dis;
    private Decimal tot;
    private string stat;
    private int branchID;
    private int empID;
    private int clientID;
    private int partnerID;
    private int typeID;
    private int cabID;

	public virtual string feedback
	{
        get { return feed; }
        set { feed = value; }
	}

	public virtual int reservation_id
	{
        get { return reservID; }
        set { reservID = value; }
	}

	public virtual string pick_up_address
	{
        get { return pickAdd; }
        set { pickAdd = value; }
	}	

	public virtual string destination
	{
        get { return dest; }
        set { dest = value; }
	}	

	public virtual DateTime pick_up_date_time
	{
        get { return pickDateTime; }
        set { pickDateTime = value; }
	}

	public virtual DateTime drop_date_time
	{
        get { return dropDateTime; }
        set { dropDateTime = value; }
	}

	public virtual Decimal additional_distance
	{
        get { return addDistance; }
        set { addDistance = value; }
	}

	public virtual Decimal distance
	{
        get { return dis; }
        set { dis = value; }
	}

	public virtual Decimal total
	{
        get { return tot; }
        set { tot = value; }
	}

	public virtual string status
	{
        get { return stat; }
        set { stat = value; }
	}

	public virtual int branch_id
	{
        get { return branchID; }
        set { branchID = value; }
	}

	public virtual int employee_id
	{
        get { return empID; }
        set { empID = value; }
	}

	public virtual int client_id
	{
        get { return clientID; }
        set { clientID = value; }
	}

	public virtual int partner_id
	{
        get { return partnerID; }
        set { partnerID = value; }
	}

    public virtual int type_id
    {
        get { return typeID; }
        set { typeID = value; }
    }
	
	public virtual int cab_id
	{
        get { return cabID; }
        set { cabID = value; }
	}

	public virtual Client Client
	{
		get;
		set;
	}

	public virtual Branch Branch
	{
		get;
		set;
	}	

	public virtual Employee Driver
	{
		get;
		set;
	}

	public virtual Partner Partner
	{
		get;
		set;
	}


    public Reservation(string pickUpAddress, string Destination, DateTime pickUpDateTime, DateTime dropDateTime,Decimal Distance,Decimal additionalDistance,Decimal Total,string Status,int branchId,int driverId,int clientId,int cabId,string Feedback)
    {

        pick_up_address = pickUpAddress;
        destination = Destination;
        pick_up_date_time = pickUpDateTime;
        drop_date_time = dropDateTime;
        distance = Distance;
        additional_distance = additionalDistance;
        total = Total;
        status = Status;
        client_id = clientId;
        cab_id = cabId;
        feedback = Feedback;
        employee_id = driverId;
        branch_id = branchId;
    }

    public Reservation(string pickUpAdd,string dropAdd,Decimal dis,DateTime pickUpDateTime,DateTime dropDateTime,int empID,int branchID,int clientID,int cabID,Decimal tot) {
        pick_up_address = pickUpAdd;
        destination = dropAdd;
        distance = dis;
        pick_up_date_time = pickUpDateTime;
        drop_date_time = dropDateTime;
        employee_id = empID;
        branch_id = branchID;
        client_id = clientID;
        cab_id = cabID;
        total = tot;
    }


    public Reservation(int reservationId, string pickUpAddress, string Destination, DateTime pickUpDateTime, DateTime dropDateTime, Decimal Distance, Decimal additionalDistance, Decimal Total, string Status, int branchId, int driverId, int clientId, int cabId, string Feedback)
    {

        pick_up_address = pickUpAddress;
        destination = Destination;
        pick_up_date_time = pickUpDateTime;
        drop_date_time = dropDateTime;
        distance = Distance;
        additional_distance = additionalDistance;
        total = Total;
        status = Status;
        client_id = clientId;
        cab_id = cabId;
        feedback = Feedback;
        reservation_id = reservationId;
        employee_id = driverId;
        branch_id = branchId;
    }

    public Reservation()
    {

    }

	public bool AddReservationAsClient(string connString)
	{
        try
        {
            //reservation_id is auto incremented
            
            string query = "INSERT INTO Reservation"+
            "(pick_up_address,destination,pick_up_date_time,drop_date_time"+
            ",branch_id,employee_id,"+
            "client_id,cab_id,distance,total)VALUES" +
            "(@pick_up_address,@destination,@pick_up_date_time,@drop_date_time" +
            ",@branch_id,@employee_id," +
            "@client_id,@cab_id,@distance,@total)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[10];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@pick_up_address", DbType.String,pick_up_address);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@destination", DbType.String,destination);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime,pick_up_date_time);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime,drop_date_time);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32,branch_id);
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32,employee_id);
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@client_id", DbType.Int32,client_id);            
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32,cab_id);
            paraArray[8] = (DbParameter)DbHelper.CreateParameter("@distance", DbType.Decimal, distance);
            paraArray[9] = (DbParameter)DbHelper.CreateParameter("@total",DbType.Decimal,total);
            
            
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else                
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

    public bool AddReservationAsPartner(string connString)
    {
        try
        {
            //reservation_id is auto incremented

            string query = "INSERT INTO Reservation" +
            "(pick_up_address,destination,pick_up_date_time,drop_date_time" +
            ",branch_id,employee_id," +
            "partner_id,cab_id)VALUES" +
            "(@pick_up_address,@destination,@pick_up_date_time,@drop_date_time" +
            ",@branch_id,@employee_id," +
            "@partner_id,@cab_id)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[8];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@pick_up_address", DbType.String, pick_up_address);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@destination", DbType.String, destination);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime, pick_up_date_time);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime, drop_date_time);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32, branch_id);
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32, employee_id);
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@partner_id", DbType.Int32, client_id);
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32, cab_id);


            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

	public bool UpdateClientReservationBasicThings(string connString)
	{
        try
        {
            string query = "Update Reservation set pick_up_address=@pick_up_address,destination=@destination,"+
                "pick_up_date_time=@pick_up_date_time,drop_date_time=@drop_date_time,branch_id=@branch_id,"+
                "employee_id=@employee_id,distance=@distance,cab_id=@cab_id where reservation_id=@reservation_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[9];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@pick_up_address", DbType.String, pick_up_address);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@destination", DbType.String, destination);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime, pick_up_date_time);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime, drop_date_time);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32, branch_id);
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32, employee_id);            
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32, cab_id);
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@reservation_id", DbType.Int32, reservation_id);
            paraArray[8] = (DbParameter)DbHelper.CreateParameter("@distance", DbType.Decimal, distance);

            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

    public bool UpdatePartnerReservationBasicThings(string connString)
    {
        try
        {
            string query = "Update Reservation set pick_up_address=@pick_up_address,destination=@destination," +
                "pick_up_date_time=@pick_up_date_time,drop_date_time=@drop_date_time,branch_id=@branch_id," +
                "employee_id=@employee_id,partner_id=@partner_id,cab_id=@cab_id where reservation_id=@reservation_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[9];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@pick_up_address", DbType.String, pick_up_address);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@destination", DbType.String, destination);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime, pick_up_date_time);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime, drop_date_time);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32, branch_id);
            paraArray[5] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32, employee_id);
            paraArray[6] = (DbParameter)DbHelper.CreateParameter("@partner_id", DbType.Int32,partner_id);
            paraArray[7] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32, cab_id);
            paraArray[8] = (DbParameter)DbHelper.CreateParameter("@reservation_id", DbType.Int32, reservation_id);

            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

	public bool RemoveReservation(string connString)
	{
		
        try
        {
            string query = "Delete from Reservation where reservation_id=@reservation_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[1];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@reservation_id", DbType.Int32,reservation_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	
	}

	public List<Reservation> GetReservationInfo(string connString)
	{
        try
        {
            List<Reservation> reservationList = new List<Reservation>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select reservation_id,pick_up_address,destination,pick_up_date_time,drop_date_time,"+
                "branch_id,employee_id,client_id,partner_id,cab_id,additional_distance,total,status,feedback,distance"+
                " from Reservation";
            if (reservation_id !=0)
            {
                query += " where reservation_id=@reservation_id";
                DbParameter[] paraArray = new DbParameter[1];
                paraArray[0] = (DbParameter)DbHelper.CreateParameter("@reservation_id", DbType.Int32,reservation_id);

                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, paraArray);
            }
            else
            {
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);

            }
            while (reader.Read())
            {
                Reservation r = new Reservation();
                r.reservation_id = Convert.ToInt32(reader[0].ToString());
                r.pick_up_address = reader[1].ToString();
                r.destination =reader[2].ToString();
                r.pick_up_date_time = Convert.ToDateTime(reader[3].ToString());
                r.drop_date_time = Convert.ToDateTime(reader[4].ToString());
                r.branch_id = Convert.ToInt32(reader[5].ToString());
                r.employee_id = Convert.ToInt32(reader[6].ToString());
                r.client_id = Convert.ToInt32(reader[7].ToString());
                r.partner_id = Convert.ToInt32(reader[8].ToString());
                r.cab_id = Convert.ToInt32(reader[9].ToString());
                r.additional_distance = Convert.ToDecimal(reader[10].ToString());
                r.total = Convert.ToDecimal(reader[11].ToString());
                r.status = reader[12].ToString();
                r.feedback = reader[13].ToString();
                reservationList.Add(r);
            }
            reader.Close();
            conn.Close();
            return reservationList;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

    //update reservation cost,status and feedback after the reservation complteted

    public bool UpdateBillDetails(string connString)
    {
        try
        {
            string query = "Update Reservation set additional_distance=@additional_distance"+
                ",total=@total,status=@status,feedback=@feedback where reservation_id=@reservation_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[5];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@additional_distance", DbType.Decimal, additional_distance);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@total", DbType.Decimal,total);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@status", DbType.String,status);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@feedback", DbType.String,feedback);
            paraArray[4] = (DbParameter)DbHelper.CreateParameter("@reservation_id", DbType.Int32,reservation_id);             

            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }


    public int findDriver(string connString)
    {
        List<int> ids = new List<int>();
        DbDataReader reader = null;
        DbHelper.ConnectionString = connString;
        DbConnection conn = DbHelper.GetConnection();
        conn.Open();

        string query1 = "select employee_id from Reservation where not (drop_date_time < @drop_date_time  OR pick_up_date_time > @pick_up_date_time)";
        DbParameter[] paraArray = new DbParameter[2];
        paraArray[0] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime,drop_date_time);
        paraArray[1] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime, pick_up_date_time);

        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query1, paraArray);

        while(reader.Read()){
            ids.Add(Convert.ToInt32(reader[0].ToString()));
        }

        string query2="select * from Employee where employee_id NOT IN (@id) AND job_title='driver'";
        DbParameter[] paraArray2 = new DbParameter[1];

        int emId = 0;
        foreach(int id in ids){
            emId = id;
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@id", DbType.Int32, emId);
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query2, paraArray);
        }
        

        int returnValue = 0;

        while(reader.Read()){
            returnValue=Convert.ToInt32(reader[0].ToString());
        }
        reader.Close();
        conn.Close();
        return returnValue;
          
    }

    public bool CheckReservation(string connString)
    {
        List<int> cabIDs = new List<int>();
        DbDataReader reader = null;
        DbHelper.ConnectionString = connString;
        DbConnection conn = DbHelper.GetConnection();
        conn.Open();

        string query1 = "SELECT * from Cab Where type_id =@type_id";
        DbParameter[] paraArray = new DbParameter[1];
        paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type_id", DbType.Int32,type_id);

        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query1, paraArray);

        while(reader.Read()){
            cabIDs.Add(Convert.ToInt32(reader[0].ToString()));
        }

        string query2 = "select * from Reservation where cab_id IN (@cabID) AND branch_id =@branch_id AND  not (drop_date_time < @drop_date_time  OR pick_up_date_time >@pick_up_date_time) ";
        DbParameter[] paraArray2 = new DbParameter[4];
        paraArray[1] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32,branch_id);
        paraArray[2] = (DbParameter)DbHelper.CreateParameter("@drop_date_time", DbType.DateTime,drop_date_time);
        paraArray[3] = (DbParameter)DbHelper.CreateParameter("@pick_up_date_time", DbType.DateTime,pick_up_date_time);

        foreach(int cabID in cabIDs){
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@cabID", DbType.Int32,cab_id);
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query2, paraArray);
            if (reader.Read())
            {
                return true;
            }
            else {
                return false;
            }
        }
        reader.Close();
        conn.Close();
        return false;
    }

    //Dispatching driver for the reservation
    public Employee DispatchDriver(string connString, DateTime pickUpDateTime, DateTime dropDateTime, string location)
    {
        try
        {
            List<int> allTheDrivers = new List<int>();           
            List<int> notEverDispatchedDrivers = new List<int>();
            List<int> selectedDrivers = new List<int>();

            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();
            string query1 = "select employee_id from Employee WHERE branch_id=(select branch_id from Branch where location='" + location + "') AND job_id=3";
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query1, null);
            while (reader.Read())
            {                
                allTheDrivers.Add(Convert.ToInt32(reader[0].ToString()));
            }
            string query2 = "select * from Reservation where employee_id=@employee_id";
            DbParameter[] paraArray = new DbParameter[1];
            foreach(int id in allTheDrivers){
                paraArray[0] = (DbParameter)DbHelper.CreateParameter("@employee_id", DbType.Int32,id);
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query2, paraArray);
                if (reader.Read())
                {

                }
                else {
                    notEverDispatchedDrivers.Add(id);
                }               
            }

            if (notEverDispatchedDrivers.Count == 0)
            {                
                List<int> driverIds = new List<int>();
                List<int> driverIds2 = new List<int>();                
                DateTime endTime = dropDateTime.AddHours(2);
                string query4 = "select employee_id from Reservation where drop_date_time<='" + pickUpDateTime.ToString() + "' AND branch_id=(select branch_id from Branch where location='" + location + "')";
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query4, null);
                if (reader.Read())
                {
                    while (reader.Read())
                    {
                        driverIds.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    string query5 = "select employee_id from Reservation where pick_up_date_time>='" + endTime.ToString() + "'AND branch_id=(select branch_id from Branch where location='" + location + "')";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query5, null);
                    while (reader.Read())
                    {
                        driverIds2.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    foreach (int ID1 in driverIds)
                    {
                        foreach (int ID2 in driverIds2)
                        {
                            if (ID1 == ID2)
                            {
                                selectedDrivers.Add(ID1);
                            }
                        }
                    }
                    foreach(int ID3 in selectedDrivers){
                        string query6 = "select count(*) from Reservation where CONVERT(pick_up_date_time,GETDATE())='" + pickUpDateTime.Date.ToString() + "'AND employee_id='" + ID3 + "'AND branch_id=(select branch_id from Branch where location='" + location + "')";
                        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query6, null);
                        int count = 0;
                        while(reader.Read()){
                            count = Convert.ToInt32(reader[0].ToString());
                        }
                        if(count<10){
                            string query7 = "select first_name,last_name,contact_number from Employee where employee_id='" + ID3 + "'";
                            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query7, null);
                            if (reader.Read())
                            {
                                Employee e = new Employee();
                                e.employee_id = ID3;
                                e.first_name = reader[0].ToString();
                                e.last_name = reader[1].ToString();
                                e.contact_number = reader[2].ToString();
                                return e;
                            }
                        }
                    }
                }
                else {
                    string query8 = "select employee_id from Reservation where pick_up_date_time>='" + endTime.ToString() + "'AND branch_id=(select branch_id from Branch where location='" + location + "')";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query8, null);
                    while (reader.Read())
                    {
                        selectedDrivers.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    foreach (int ID3 in selectedDrivers)
                    {
                        string query6 = "select count(*) from Reservation where CONVERT(pick_up_date_time,GETDATE())='" + pickUpDateTime.Date.ToString() + "'AND employee_id='" + ID3 + "'";
                        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query6, null);
                        int count = 0;
                        while (reader.Read())
                        {
                            count = Convert.ToInt32(reader[0].ToString());
                        }
                        if (count < 10)
                        {
                            string query7 = "select first_name,last_name,contact_number from Employee where employee_id='" + ID3 + "'";
                            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query7, null);
                            if (reader.Read())
                            {
                                Employee e = new Employee();
                                e.employee_id = ID3;
                                e.first_name = reader[0].ToString();
                                e.last_name = reader[1].ToString();
                                e.contact_number = reader[2].ToString();
                                return e;
                            }
                        }
                        else { 
                           Employee e=null;
                           return e;
                        }
                    }
                }                

            }
            else { 
                foreach(int id in notEverDispatchedDrivers){
                    string query3 = "select first_name,last_name,contact_number from Employee where employee_id='"+id+"'";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query3,null);
                    if (reader.Read())
                    {
                        Employee e = new Employee();
                        e.employee_id = id;
                        e.first_name = reader[0].ToString();
                        e.last_name = reader[1].ToString();
                        e.contact_number = reader[2].ToString();
                        return e;
                    }                    
                }
            }
            Employee em =null;
            reader.Close();
            conn.Close();
            return em;
        }
        catch (Exception ex)
        {
            
            throw ex;
        } 

    }

    //Dispatching cab for the reservation
    public Cab DispatchCab(string connString, DateTime pickUpDateTime, DateTime dropDateTime,string type,string location)
    {
        try
        {
            
           
            List<int> allTheCabs = new List<int>();
            List<int> notEverDispatchedCabs = new List<int>();
            List<int> selectedCabs = new List<int>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();
            string query1 = "select cab_id from Cab where type_id=(select type_id from Type where type='" + type + "') AND branch_id=(select branch_id from Branch where location='"+location+"')";
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query1, null);
            while (reader.Read())
            {
                allTheCabs.Add(Convert.ToInt32(reader[0].ToString()));
            }
            string query2 = "select * from Reservation where cab_id=@cab_id";
            DbParameter[] paraArray = new DbParameter[1];
            foreach (int id in allTheCabs)
            {
                paraArray[0] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32, id);
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query2, paraArray);
                if (reader.Read())
                {
                    
                }
                else {
                    notEverDispatchedCabs.Add(id);
                }
            }
            
            if (notEverDispatchedCabs.Count == 0)
            {
                
                List<int> driverIds = new List<int>();
                List<int> driverIds2 = new List<int>();
                
                DateTime endTime = dropDateTime.AddHours(2);

                string query4 = "select cab_id from Reservation where drop_date_time<='" + pickUpDateTime.ToString() + "'AND branch_id=(select branch_id from Branch where location='" + location + "') AND cab_id in (select cab_id from Cab where type_id=(select type_id from Type where type='" + type + "'))";
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query4, null);
                if (reader.Read())
                {
                    while (reader.Read())
                    {
                        driverIds.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    string query5 = "select cab_id from Reservation where pick_up_date_time>='" + endTime.ToString() + "'AND branch_id=(select branch_id from Branch where location='" + location + "')AND cab_id in (select cab_id from Cab where type_id=(select type_id from Type where type='" + type + "'))";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query5, null);
                    while (reader.Read())
                    {
                        driverIds2.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    foreach (int ID1 in driverIds)
                    {
                        foreach (int ID2 in driverIds2)
                        {
                            if (ID1 == ID2)
                            {
                                selectedCabs.Add(ID1);
                            }
                        }
                    }
                    foreach (int ID3 in selectedCabs)
                    {
                        string query6 = "select count(*) from Reservation where CONVERT(pick_up_date_time,GETDATE())='" + pickUpDateTime.Date.ToString() + "'AND cab_id='" + ID3 + "'";
                        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query6, null);
                        int count = 0;
                        while (reader.Read())
                        {
                            count = Convert.ToInt32(reader[0].ToString());
                        }
                        if (count < 10)
                        {
                            string query7 = "select cab_registration_no from Cab where cab_id='" + ID3 + "'";
                            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query7, null);
                            if (reader.Read())
                            {
                                Cab c = new Cab();
                                c.cab_id = ID3;
                                c.cab_registration_no = reader[0].ToString();                                
                                return c;
                            }
                        }
                    }
                }
                else
                {
                    string query8 = "select cab_id from Reservation where pick_up_date_time>='" + endTime.ToString() + "'AND branch_id=(select branch_id from Branch where location='" + location + "')AND cab_id in (select cab_id from Cab where type_id=(select type_id from Type where type='" + type + "'))";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query8, null);
                    while (reader.Read())
                    {
                        selectedCabs.Add(Convert.ToInt32(reader[0].ToString()));
                    }
                    foreach (int ID3 in selectedCabs)
                    {
                        string query6 = "select count(*) from Reservation where CONVERT(pick_up_date_time,GETDATE())='" + pickUpDateTime.Date.ToString() + "'AND cab_id='" + ID3 + "'";
                        reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query6, null);
                        int count = 0;
                        while (reader.Read())
                        {
                            count = Convert.ToInt32(reader[0].ToString());
                        }
                        if (count < 10)
                        {
                            string query7 = "select cab_registration_no from Cab where cab_id='" + ID3 + "'";
                            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query7, null);
                            if (reader.Read())
                            {
                                Cab c = new Cab();
                                c.cab_id = ID3;
                                c.cab_registration_no = reader[0].ToString();                                
                                return c;
                            }
                        }
                        else
                        {
                            Cab c= null;
                            return c;
                        }
                    }
                }

            }
            else
            {
                foreach (int id in notEverDispatchedCabs)
                {
                    string query3 = "select cab_registration_no from Cab where cab_id='" + id + "'";
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query3, null);
                    while (reader.Read())
                    {
                        Cab c = new Cab();
                        c.cab_id = id;
                        c.cab_registration_no = reader[0].ToString();                        
                        return c;
                    }
                }
            }
            Cab cab = null;
            reader.Close();
            conn.Close();
            return cab;
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }

    //get max reservation id from the database

    public int GetMaxReservationID(string connString)
    {
        try
        {
            int maxReservationID = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select MAX(reservation_id)as MaxID from Reservation";
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);
            if (reader.Read())
            {
                maxReservationID = Convert.ToInt32(reader[0].ToString());
            }
            reader.Close();
            conn.Close();
            return maxReservationID;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get distance from the database
    public Decimal GetDistanceAccordingToReservationID(string connString,int reservID)
    {
        try
        {
            Decimal dis = 0;
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select distance from Reservation where reservation_id='"+reservID+"'";
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);
            if (reader.Read())
            {
                dis = Convert.ToDecimal(reader[0].ToString());
            }
            reader.Close();
            conn.Close();
            return dis;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get pick up date time and drop date time according to the reservation id
    public DateTime[] GetDateTimeAccordingToReservationID(string connString, int reservID)
    {
        try
        {
            DateTime []h= new DateTime[2];
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select pick_up_date_time,drop_date_time from Reservation where reservation_id='" + reservID + "'";
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);
            if (reader.Read())
            {
                h[0]=Convert.ToDateTime(reader[0].ToString());
                h[1]=Convert.ToDateTime(reader[1].ToString());
            }
            reader.Close();
            conn.Close();
            return h;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    //get pending reservation according to employee id
    public List<Reservation> GetReservationAccordingToEmployee(string connString,string user)
    {
        try
        {
            List<Reservation> l=new List<Reservation>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();          
            string status="pending";
            string query = "select reservation_id,pick_up_address,destination,pick_up_date_time," +
                "drop_date_time,distance,client_id,partner_id,cab_id from Reservation where " +
                "status='" + status + "' AND employee_id=(select employee_id from Employee where username='" + user + "')";
            
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query,null);
            
            while (reader.Read())
            {
                Reservation r=new Reservation();
                r.reservation_id= Convert.ToInt32(reader[0].ToString());
                r.pick_up_address = reader[1].ToString();
                r.destination = reader[2].ToString();                
                r.pick_up_date_time = Convert.ToDateTime(reader[3].ToString());                
                r.drop_date_time = Convert.ToDateTime(reader[4].ToString());
                
                r.distance = Convert.ToDecimal(reader[5].ToString());
                if (!reader.IsDBNull(6))
                {
                    r.client_id = Convert.ToInt32(reader[6].ToString());
                }
                if (!reader.IsDBNull(7))
                {
                    r.partner_id = Convert.ToInt32(reader[7].ToString());
                }                
                r.cab_id = Convert.ToInt32(reader[8].ToString());                
                l.Add(r);                
            }
            reader.Close();
            conn.Close();
            return l;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
}

