//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using HeadQuarters.DL;

public class Partner
{
    private string aboutDetails;
    private int partnerID;
    private string con;
    private string add;

	public virtual string about
	{
        get { return aboutDetails; }
        set { aboutDetails = value; }
	}

	public virtual int partner_id
	{
        get { return partnerID; }
        set { partnerID = value; }
	}

	public virtual string contact_number
	{
        get { return con; }
        set { con = value; }
	}

	public virtual string address
	{
        get { return add; }
        set { add = value; }
	}

    public Partner(string About,string contactNumber,string Address)
    {
        about = About;
        contact_number = contactNumber;
        address = Address;
    }

    public Partner(int partnerId,string About, string contactNumber, string Address)
    {
        about = About;
        contact_number = contactNumber;
        address = Address;
        partner_id = partnerId;
    }

    public Partner()
    {

    }

	public bool AddPartner(string connString)
	{
        try
        {
            //no need of insert partner id->becuase it is auto incremented

            string query = "INSERT INTO Partner(about,contact_number,address)" +
                "VALUES(@about,@contact_number,@address)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[3];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@about", DbType.String,about);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@contact_number", DbType.String,contact_number);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@address", DbType.String,address);
            

            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public bool RemovePartner(string connString)
	{
        try
        {
            string query = "Delete from Partner where partner_id=@partner_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[1];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@partner_id", DbType.Int32, partner_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public bool UpdatePartner(string connString)
	{
        try
        {
            string query = "Update Partner set about=@about,contact_number=@contact_number,address=@address where partner_id=@partner_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[4];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@about", DbType.String,about);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@contact_number", DbType.String,contact_number);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@address", DbType.String,address);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@partner_id", DbType.Int32,partner_id);

            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

	public List<Partner> GetPartnerInfo(string connString)
	{
        try
        {
            List<Partner> partnerList = new List<Partner>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select partner_id,about,contact_number,address from Partner";
            if (partner_id !=0)
            {
                query += " where partner_id=@partner_id";
                DbParameter[] paraArray = new DbParameter[1];
                paraArray[0] = (DbParameter)DbHelper.CreateParameter("@partner_id", DbType.Int32, partner_id);

                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, paraArray);
            }
            else
            {
                reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);

            }
            while (reader.Read())
            {
                Partner p = new Partner();
                p.partner_id = Convert.ToInt32(reader[0].ToString());
                p.about = reader[1].ToString();
                p.contact_number = reader[2].ToString();
                p.address = reader[3].ToString();

                partnerList.Add(p);
            }
            reader.Close();
            conn.Close();
            return partnerList;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

}

