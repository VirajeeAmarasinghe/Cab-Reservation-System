//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using HeadQuarters.DL;


public class Cab
{
    private int cabID;
    private int typeID;
    private string typ;
    private int branchID;
    private string branchLoc;
    private string cabRegNo;

	public virtual int cab_id
	{
        get { return cabID; }
        set { cabID = value; }
	}

	public virtual int type_id
	{
        get { return typeID; }
        set { typeID = value; }
	}

    public virtual string type
    {
        get { return typ; }
        set { typ = value; }
    }

	public virtual int branch_id
	{
        get { return branchID; }
        set { branchID = value; }
	}

    public virtual string branch_location
    {
        get { return branchLoc; }
        set { branchLoc = value; }
    }

	public virtual string cab_registration_no
	{
        get { return cabRegNo; }
        set { cabRegNo = value; }
	}	

	public virtual Branch Branch
	{
		get;
		set;
	}

    public Cab(int Type ,int branchId, string cabRegistrationNo)
    {
        type_id = Type;
        branch_id = branchId;
        cab_registration_no = cabRegistrationNo;

    }

    public Cab(int cabId,int Type, int branchId, string cabRegistrationNo)
    {
        type_id = Type;
        cab_id= cabId;
        branch_id = branchId;
        cab_registration_no = cabRegistrationNo;

    }

    public Cab()
    {

    }

	public virtual void CheckAvailability()
	{
		throw new System.NotImplementedException();
	}

	public bool AddCab(string connString)
	{
        try
        {
            //no need of insert cab id->becuase it is auto incremented
           
            string query = "INSERT INTO Cab(type_id,branch_id,cab_registration_no)VALUES(@type_id,@branch_id,@cab_registration_no)";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[3];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type_id", DbType.Int32,type_id);           
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32,branch_id);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@cab_registration_no", DbType.String,cab_registration_no);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {
            
            throw ex;
        }
	}

	public bool RemoveCab(string connString)
	{
        try
        {
            string query = "Delete from Cab where cab_id=@cab_id";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[1];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32,cab_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

    //update cab details
	public bool UpdateCab(string connString)
	{
        try
        {
            string query = "Update Cab set type_id=@type_id,branch_id=@branch_id,cab_registration_no=@cab_registration_no where cab_id=@cab_id ";
            DbHelper.ConnectionString = connString;
            DbParameter[] paraArray = new DbParameter[4];
            paraArray[0] = (DbParameter)DbHelper.CreateParameter("@type_id", DbType.Int32, type_id);
            paraArray[1] = (DbParameter)DbHelper.CreateParameter("@branch_id", DbType.Int32, branch_id);
            paraArray[2] = (DbParameter)DbHelper.CreateParameter("@cab_registration_no", DbType.String, cab_registration_no);
            paraArray[3] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32, cab_id);
            if (DbHelper.ExecuteNonQuery(CommandType.Text, query, paraArray) > 0)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            throw ex;
        }
	}

    //get cab details from the database

    public List<Cab> GetCabInfo(string connString)
        {
            try
            {
                List<Cab> cabList = new List<Cab>();
                DbDataReader reader = null;
                DbHelper.ConnectionString = connString;
                DbConnection conn = DbHelper.GetConnection();
                conn.Open();

                string query = "select cab_id,type_id,branch_id,cab_registration_no from Cab";
                if (cab_id !=0)
                {
                    query += " where cab_id=@cab_id";
                    DbParameter[] paraArray = new DbParameter[1];
                    paraArray[0] = (DbParameter)DbHelper.CreateParameter("@cab_id", DbType.Int32,cab_id);

                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, paraArray);
                }
                else
                {
                    reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);
 
                }
                while (reader.Read())
                {
                    Cab c = new Cab();
                    c.cab_id = Convert.ToInt32(reader[0].ToString());
                    c.type_id=Convert.ToInt32(reader[1].ToString());                    
                    c.branch_id = Convert.ToInt32(reader[2].ToString());
                    c.cab_registration_no = reader[3].ToString();
                    cabList.Add(c);
                }
                reader.Close();
                conn.Close();
                return cabList;
            }
            catch (Exception ex)
            {
                
                throw ex;
            }
        }

    public List<string> GetTypeInfo(string connString){
        try{
            List<string> typeList = new List<string>();
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select type from Type";

            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);


            while (reader.Read())
            {

                string type = reader[0].ToString();

                typeList.Add(type);
            }
            reader.Close();
            conn.Close();
            return typeList;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }

    public string GetCabRegNo(string connString,int cabID)
    {
        try
        {
            string cabNo = "";
            DbDataReader reader = null;
            DbHelper.ConnectionString = connString;
            DbConnection conn = DbHelper.GetConnection();
            conn.Open();

            string query = "select cab_registration_no from Cab where cab_id='"+cabID+"'";
            
            reader = DbHelper.ExecuteReader(ref conn, CommandType.Text, query, null);

            
            while (reader.Read())
            {
                
                cabNo = reader[0].ToString();
                
            }
            reader.Close();
            conn.Close();
            return cabNo;
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    
   }



